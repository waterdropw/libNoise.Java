/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.xbwee.libnoise.utils;

import net.xbwee.libnoise.module.Module;

public class RendererImage {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public RendererImage(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(RendererImage obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NoiseUtilsJNI.delete_RendererImage(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RendererImage() {
    this(NoiseUtilsJNI.new_RendererImage(), true);
  }

  public void AddGradientPoint(double gradientPos, Color gradientColor) {
    NoiseUtilsJNI.RendererImage_AddGradientPoint(swigCPtr, this, gradientPos, Color.getCPtr(gradientColor), gradientColor);
  }

  public void BuildGrayscaleGradient() {
    NoiseUtilsJNI.RendererImage_BuildGrayscaleGradient(swigCPtr, this);
  }

  public void BuildTerrainGradient() {
    NoiseUtilsJNI.RendererImage_BuildTerrainGradient(swigCPtr, this);
  }

  public void ClearGradient() {
    NoiseUtilsJNI.RendererImage_ClearGradient(swigCPtr, this);
  }

  public void EnableLight(boolean enable) {
    NoiseUtilsJNI.RendererImage_EnableLight__SWIG_0(swigCPtr, this, enable);
  }

  public void EnableLight() {
    NoiseUtilsJNI.RendererImage_EnableLight__SWIG_1(swigCPtr, this);
  }

  public void EnableWrap(boolean enable) {
    NoiseUtilsJNI.RendererImage_EnableWrap__SWIG_0(swigCPtr, this, enable);
  }

  public void EnableWrap() {
    NoiseUtilsJNI.RendererImage_EnableWrap__SWIG_1(swigCPtr, this);
  }

  public double GetLightAzimuth() {
    return NoiseUtilsJNI.RendererImage_GetLightAzimuth(swigCPtr, this);
  }

  public double GetLightBrightness() {
    return NoiseUtilsJNI.RendererImage_GetLightBrightness(swigCPtr, this);
  }

  public Color GetLightColor() {
    return new Color(NoiseUtilsJNI.RendererImage_GetLightColor(swigCPtr, this), true);
  }

  public double GetLightContrast() {
    return NoiseUtilsJNI.RendererImage_GetLightContrast(swigCPtr, this);
  }

  public double GetLightElev() {
    return NoiseUtilsJNI.RendererImage_GetLightElev(swigCPtr, this);
  }

  public double GetLightIntensity() {
    return NoiseUtilsJNI.RendererImage_GetLightIntensity(swigCPtr, this);
  }

  public boolean IsLightEnabled() {
    return NoiseUtilsJNI.RendererImage_IsLightEnabled(swigCPtr, this);
  }

  public boolean IsWrapEnabled() {
    return NoiseUtilsJNI.RendererImage_IsWrapEnabled(swigCPtr, this);
  }

  public void Render() {
    NoiseUtilsJNI.RendererImage_Render(swigCPtr, this);
  }

  public void SetBackgroundImage(Image backgroundImage) {
    NoiseUtilsJNI.RendererImage_SetBackgroundImage(swigCPtr, this, Image.getCPtr(backgroundImage), backgroundImage);
  }

  public void SetDestImage(Image destImage) {
    NoiseUtilsJNI.RendererImage_SetDestImage(swigCPtr, this, Image.getCPtr(destImage), destImage);
  }

  public void SetLightAzimuth(double lightAzimuth) {
    NoiseUtilsJNI.RendererImage_SetLightAzimuth(swigCPtr, this, lightAzimuth);
  }

  public void SetLightBrightness(double lightBrightness) {
    NoiseUtilsJNI.RendererImage_SetLightBrightness(swigCPtr, this, lightBrightness);
  }

  public void SetLightColor(Color lightColor) {
    NoiseUtilsJNI.RendererImage_SetLightColor(swigCPtr, this, Color.getCPtr(lightColor), lightColor);
  }

  public void SetLightContrast(double lightContrast) {
    NoiseUtilsJNI.RendererImage_SetLightContrast(swigCPtr, this, lightContrast);
  }

  public void SetLightElev(double lightElev) {
    NoiseUtilsJNI.RendererImage_SetLightElev(swigCPtr, this, lightElev);
  }

  public void SetLightIntensity(double lightIntensity) {
    NoiseUtilsJNI.RendererImage_SetLightIntensity(swigCPtr, this, lightIntensity);
  }

  public void SetSourceNoiseMap(NoiseMap sourceNoiseMap) {
    NoiseUtilsJNI.RendererImage_SetSourceNoiseMap(swigCPtr, this, NoiseMap.getCPtr(sourceNoiseMap), sourceNoiseMap);
  }

}
