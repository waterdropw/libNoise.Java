/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.xbwee.libnoise.utils;

import net.xbwee.libnoise.module.Module;

public class RendererNormalMap {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public RendererNormalMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(RendererNormalMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NoiseUtilsJNI.delete_RendererNormalMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RendererNormalMap() {
    this(NoiseUtilsJNI.new_RendererNormalMap(), true);
  }

  public void EnableWrap(boolean enable) {
    NoiseUtilsJNI.RendererNormalMap_EnableWrap__SWIG_0(swigCPtr, this, enable);
  }

  public void EnableWrap() {
    NoiseUtilsJNI.RendererNormalMap_EnableWrap__SWIG_1(swigCPtr, this);
  }

  public double GetBumpHeight() {
    return NoiseUtilsJNI.RendererNormalMap_GetBumpHeight(swigCPtr, this);
  }

  public boolean IsWrapEnabled() {
    return NoiseUtilsJNI.RendererNormalMap_IsWrapEnabled(swigCPtr, this);
  }

  public void Render() {
    NoiseUtilsJNI.RendererNormalMap_Render(swigCPtr, this);
  }

  public void SetBumpHeight(double bumpHeight) {
    NoiseUtilsJNI.RendererNormalMap_SetBumpHeight(swigCPtr, this, bumpHeight);
  }

  public void SetDestImage(Image destImage) {
    NoiseUtilsJNI.RendererNormalMap_SetDestImage(swigCPtr, this, Image.getCPtr(destImage), destImage);
  }

  public void SetSourceNoiseMap(NoiseMap sourceNoiseMap) {
    NoiseUtilsJNI.RendererNormalMap_SetSourceNoiseMap(swigCPtr, this, NoiseMap.getCPtr(sourceNoiseMap), sourceNoiseMap);
  }

}
