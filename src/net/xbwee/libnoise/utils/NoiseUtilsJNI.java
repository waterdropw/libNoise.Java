/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.xbwee.libnoise.utils;

import net.xbwee.libnoise.module.Module;

public class NoiseUtilsJNI {
  public final static native int RASTER_MAX_WIDTH_get();
  public final static native int RASTER_MAX_HEIGHT_get();
  public final static native int RASTER_STRIDE_BOUNDARY_get();
  public final static native double DEFAULT_METERS_PER_POINT_get();
  public final static native double DEFAULT_METRES_PER_POINT_get();
  public final static native long new_Color__SWIG_0();
  public final static native long new_Color__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native void Color_alpha_set(long jarg1, Color jarg1_, short jarg2);
  public final static native short Color_alpha_get(long jarg1, Color jarg1_);
  public final static native void Color_blue_set(long jarg1, Color jarg1_, short jarg2);
  public final static native short Color_blue_get(long jarg1, Color jarg1_);
  public final static native void Color_green_set(long jarg1, Color jarg1_, short jarg2);
  public final static native short Color_green_get(long jarg1, Color jarg1_);
  public final static native void Color_red_set(long jarg1, Color jarg1_, short jarg2);
  public final static native short Color_red_get(long jarg1, Color jarg1_);
  public final static native void delete_Color(long jarg1);
  public final static native void GradientPoint_pos_set(long jarg1, GradientPoint jarg1_, double jarg2);
  public final static native double GradientPoint_pos_get(long jarg1, GradientPoint jarg1_);
  public final static native void GradientPoint_color_set(long jarg1, GradientPoint jarg1_, long jarg2, Color jarg2_);
  public final static native long GradientPoint_color_get(long jarg1, GradientPoint jarg1_);
  public final static native long new_GradientPoint();
  public final static native void delete_GradientPoint(long jarg1);
  public final static native long new_GradientColor();
  public final static native void delete_GradientColor(long jarg1);
  public final static native void GradientColor_AddGradientPoint(long jarg1, GradientColor jarg1_, double jarg2, long jarg3, Color jarg3_);
  public final static native void GradientColor_Clear(long jarg1, GradientColor jarg1_);
  public final static native long GradientColor_GetColor(long jarg1, GradientColor jarg1_, double jarg2);
  public final static native long GradientColor_GetGradientPointArray(long jarg1, GradientColor jarg1_);
  public final static native int GradientColor_GetGradientPointCount(long jarg1, GradientColor jarg1_);
  public final static native long new_NoiseMap__SWIG_0();
  public final static native long new_NoiseMap__SWIG_1(int jarg1, int jarg2);
  public final static native long new_NoiseMap__SWIG_2(long jarg1, NoiseMap jarg1_);
  public final static native void delete_NoiseMap(long jarg1);
  public final static native void NoiseMap_Clear(long jarg1, NoiseMap jarg1_, float jarg2);
  public final static native float NoiseMap_GetBorderValue(long jarg1, NoiseMap jarg1_);
  public final static native long NoiseMap_GetConstSlabPtr__SWIG_0(long jarg1, NoiseMap jarg1_);
  public final static native long NoiseMap_GetConstSlabPtr__SWIG_1(long jarg1, NoiseMap jarg1_, int jarg2);
  public final static native long NoiseMap_GetConstSlabPtr__SWIG_2(long jarg1, NoiseMap jarg1_, int jarg2, int jarg3);
  public final static native int NoiseMap_GetHeight(long jarg1, NoiseMap jarg1_);
  public final static native long NoiseMap_GetMemUsed(long jarg1, NoiseMap jarg1_);
  public final static native long NoiseMap_GetSlabPtr__SWIG_0(long jarg1, NoiseMap jarg1_);
  public final static native long NoiseMap_GetSlabPtr__SWIG_1(long jarg1, NoiseMap jarg1_, int jarg2);
  public final static native long NoiseMap_GetSlabPtr__SWIG_2(long jarg1, NoiseMap jarg1_, int jarg2, int jarg3);
  public final static native int NoiseMap_GetStride(long jarg1, NoiseMap jarg1_);
  public final static native float NoiseMap_GetValue(long jarg1, NoiseMap jarg1_, int jarg2, int jarg3);
  public final static native int NoiseMap_GetWidth(long jarg1, NoiseMap jarg1_);
  public final static native void NoiseMap_ReclaimMem(long jarg1, NoiseMap jarg1_);
  public final static native void NoiseMap_SetBorderValue(long jarg1, NoiseMap jarg1_, float jarg2);
  public final static native void NoiseMap_SetSize(long jarg1, NoiseMap jarg1_, int jarg2, int jarg3);
  public final static native void NoiseMap_SetValue(long jarg1, NoiseMap jarg1_, int jarg2, int jarg3, float jarg4);
  public final static native void NoiseMap_TakeOwnership(long jarg1, NoiseMap jarg1_, long jarg2, NoiseMap jarg2_);
  public final static native long new_Image__SWIG_0();
  public final static native long new_Image__SWIG_1(int jarg1, int jarg2);
  public final static native long new_Image__SWIG_2(long jarg1, Image jarg1_);
  public final static native void delete_Image(long jarg1);
  public final static native void Image_Clear(long jarg1, Image jarg1_, long jarg2, Color jarg2_);
  public final static native long Image_GetBorderValue(long jarg1, Image jarg1_);
  public final static native long Image_GetConstSlabPtr__SWIG_0(long jarg1, Image jarg1_);
  public final static native long Image_GetConstSlabPtr__SWIG_1(long jarg1, Image jarg1_, int jarg2);
  public final static native long Image_GetConstSlabPtr__SWIG_2(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native int Image_GetHeight(long jarg1, Image jarg1_);
  public final static native long Image_GetMemUsed(long jarg1, Image jarg1_);
  public final static native long Image_GetSlabPtr__SWIG_0(long jarg1, Image jarg1_);
  public final static native long Image_GetSlabPtr__SWIG_1(long jarg1, Image jarg1_, int jarg2);
  public final static native long Image_GetSlabPtr__SWIG_2(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native int Image_GetStride(long jarg1, Image jarg1_);
  public final static native long Image_GetValue(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native int Image_GetWidth(long jarg1, Image jarg1_);
  public final static native void Image_ReclaimMem(long jarg1, Image jarg1_);
  public final static native void Image_SetBorderValue(long jarg1, Image jarg1_, long jarg2, Color jarg2_);
  public final static native void Image_SetSize(long jarg1, Image jarg1_, int jarg2, int jarg3);
  public final static native void Image_SetValue(long jarg1, Image jarg1_, int jarg2, int jarg3, long jarg4, Color jarg4_);
  public final static native void Image_TakeOwnership(long jarg1, Image jarg1_, long jarg2, Image jarg2_);
  public final static native long new_WriterBMP();
  public final static native String WriterBMP_GetDestFilename(long jarg1, WriterBMP jarg1_);
  public final static native void WriterBMP_SetDestFilename(long jarg1, WriterBMP jarg1_, String jarg2);
  public final static native void WriterBMP_SetSourceImage(long jarg1, WriterBMP jarg1_, long jarg2, Image jarg2_);
  public final static native void WriterBMP_WriteDestFile(long jarg1, WriterBMP jarg1_);
  public final static native void delete_WriterBMP(long jarg1);
  public final static native long new_WriterTER();
  public final static native String WriterTER_GetDestFilename(long jarg1, WriterTER jarg1_);
  public final static native float WriterTER_GetMetersPerPoint(long jarg1, WriterTER jarg1_);
  public final static native void WriterTER_SetDestFilename(long jarg1, WriterTER jarg1_, String jarg2);
  public final static native void WriterTER_SetMetersPerPoint(long jarg1, WriterTER jarg1_, float jarg2);
  public final static native void WriterTER_SetSourceNoiseMap(long jarg1, WriterTER jarg1_, long jarg2, NoiseMap jarg2_);
  public final static native void WriterTER_WriteDestFile(long jarg1, WriterTER jarg1_);
  public final static native void delete_WriterTER(long jarg1);
  public final static native void NoiseMapBuilder_Build(long jarg1, NoiseMapBuilder jarg1_);
  public final static native double NoiseMapBuilder_GetDestHeight(long jarg1, NoiseMapBuilder jarg1_);
  public final static native double NoiseMapBuilder_GetDestWidth(long jarg1, NoiseMapBuilder jarg1_);
  public final static native void NoiseMapBuilder_SetCallback(long jarg1, NoiseMapBuilder jarg1_, long jarg2);
  public final static native void NoiseMapBuilder_SetDestNoiseMap(long jarg1, NoiseMapBuilder jarg1_, long jarg2, NoiseMap jarg2_);
  public final static native void NoiseMapBuilder_SetSourceModule(long jarg1, NoiseMapBuilder jarg1_, long jarg2, Module jarg2_);
  public final static native void NoiseMapBuilder_SetDestSize(long jarg1, NoiseMapBuilder jarg1_, int jarg2, int jarg3);
  public final static native void delete_NoiseMapBuilder(long jarg1);
  public final static native long new_NoiseMapBuilderCylinder();
  public final static native void NoiseMapBuilderCylinder_Build(long jarg1, NoiseMapBuilderCylinder jarg1_);
  public final static native double NoiseMapBuilderCylinder_GetLowerAngleBound(long jarg1, NoiseMapBuilderCylinder jarg1_);
  public final static native double NoiseMapBuilderCylinder_GetLowerHeightBound(long jarg1, NoiseMapBuilderCylinder jarg1_);
  public final static native double NoiseMapBuilderCylinder_GetUpperAngleBound(long jarg1, NoiseMapBuilderCylinder jarg1_);
  public final static native double NoiseMapBuilderCylinder_GetUpperHeightBound(long jarg1, NoiseMapBuilderCylinder jarg1_);
  public final static native void NoiseMapBuilderCylinder_SetBounds(long jarg1, NoiseMapBuilderCylinder jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void delete_NoiseMapBuilderCylinder(long jarg1);
  public final static native long new_NoiseMapBuilderPlane();
  public final static native void NoiseMapBuilderPlane_Build(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native void NoiseMapBuilderPlane_EnableSeamless__SWIG_0(long jarg1, NoiseMapBuilderPlane jarg1_, boolean jarg2);
  public final static native void NoiseMapBuilderPlane_EnableSeamless__SWIG_1(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native double NoiseMapBuilderPlane_GetLowerXBound(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native double NoiseMapBuilderPlane_GetLowerZBound(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native double NoiseMapBuilderPlane_GetUpperXBound(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native double NoiseMapBuilderPlane_GetUpperZBound(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native boolean NoiseMapBuilderPlane_IsSeamlessEnabled(long jarg1, NoiseMapBuilderPlane jarg1_);
  public final static native void NoiseMapBuilderPlane_SetBounds(long jarg1, NoiseMapBuilderPlane jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void delete_NoiseMapBuilderPlane(long jarg1);
  public final static native long new_NoiseMapBuilderSphere();
  public final static native void NoiseMapBuilderSphere_Build(long jarg1, NoiseMapBuilderSphere jarg1_);
  public final static native double NoiseMapBuilderSphere_GetEastLonBound(long jarg1, NoiseMapBuilderSphere jarg1_);
  public final static native double NoiseMapBuilderSphere_GetNorthLatBound(long jarg1, NoiseMapBuilderSphere jarg1_);
  public final static native double NoiseMapBuilderSphere_GetSouthLatBound(long jarg1, NoiseMapBuilderSphere jarg1_);
  public final static native double NoiseMapBuilderSphere_GetWestLonBound(long jarg1, NoiseMapBuilderSphere jarg1_);
  public final static native void NoiseMapBuilderSphere_SetBounds(long jarg1, NoiseMapBuilderSphere jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void delete_NoiseMapBuilderSphere(long jarg1);
  public final static native long new_RendererImage();
  public final static native void RendererImage_AddGradientPoint(long jarg1, RendererImage jarg1_, double jarg2, long jarg3, Color jarg3_);
  public final static native void RendererImage_BuildGrayscaleGradient(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_BuildTerrainGradient(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_ClearGradient(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_EnableLight__SWIG_0(long jarg1, RendererImage jarg1_, boolean jarg2);
  public final static native void RendererImage_EnableLight__SWIG_1(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_EnableWrap__SWIG_0(long jarg1, RendererImage jarg1_, boolean jarg2);
  public final static native void RendererImage_EnableWrap__SWIG_1(long jarg1, RendererImage jarg1_);
  public final static native double RendererImage_GetLightAzimuth(long jarg1, RendererImage jarg1_);
  public final static native double RendererImage_GetLightBrightness(long jarg1, RendererImage jarg1_);
  public final static native long RendererImage_GetLightColor(long jarg1, RendererImage jarg1_);
  public final static native double RendererImage_GetLightContrast(long jarg1, RendererImage jarg1_);
  public final static native double RendererImage_GetLightElev(long jarg1, RendererImage jarg1_);
  public final static native double RendererImage_GetLightIntensity(long jarg1, RendererImage jarg1_);
  public final static native boolean RendererImage_IsLightEnabled(long jarg1, RendererImage jarg1_);
  public final static native boolean RendererImage_IsWrapEnabled(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_Render(long jarg1, RendererImage jarg1_);
  public final static native void RendererImage_SetBackgroundImage(long jarg1, RendererImage jarg1_, long jarg2, Image jarg2_);
  public final static native void RendererImage_SetDestImage(long jarg1, RendererImage jarg1_, long jarg2, Image jarg2_);
  public final static native void RendererImage_SetLightAzimuth(long jarg1, RendererImage jarg1_, double jarg2);
  public final static native void RendererImage_SetLightBrightness(long jarg1, RendererImage jarg1_, double jarg2);
  public final static native void RendererImage_SetLightColor(long jarg1, RendererImage jarg1_, long jarg2, Color jarg2_);
  public final static native void RendererImage_SetLightContrast(long jarg1, RendererImage jarg1_, double jarg2);
  public final static native void RendererImage_SetLightElev(long jarg1, RendererImage jarg1_, double jarg2);
  public final static native void RendererImage_SetLightIntensity(long jarg1, RendererImage jarg1_, double jarg2);
  public final static native void RendererImage_SetSourceNoiseMap(long jarg1, RendererImage jarg1_, long jarg2, NoiseMap jarg2_);
  public final static native void delete_RendererImage(long jarg1);
  public final static native long new_RendererNormalMap();
  public final static native void RendererNormalMap_EnableWrap__SWIG_0(long jarg1, RendererNormalMap jarg1_, boolean jarg2);
  public final static native void RendererNormalMap_EnableWrap__SWIG_1(long jarg1, RendererNormalMap jarg1_);
  public final static native double RendererNormalMap_GetBumpHeight(long jarg1, RendererNormalMap jarg1_);
  public final static native boolean RendererNormalMap_IsWrapEnabled(long jarg1, RendererNormalMap jarg1_);
  public final static native void RendererNormalMap_Render(long jarg1, RendererNormalMap jarg1_);
  public final static native void RendererNormalMap_SetBumpHeight(long jarg1, RendererNormalMap jarg1_, double jarg2);
  public final static native void RendererNormalMap_SetDestImage(long jarg1, RendererNormalMap jarg1_, long jarg2, Image jarg2_);
  public final static native void RendererNormalMap_SetSourceNoiseMap(long jarg1, RendererNormalMap jarg1_, long jarg2, NoiseMap jarg2_);
  public final static native void delete_RendererNormalMap(long jarg1);
  public final static native long NoiseMapBuilderCylinder_SWIGUpcast(long jarg1);
  public final static native long NoiseMapBuilderPlane_SWIGUpcast(long jarg1);
  public final static native long NoiseMapBuilderSphere_SWIGUpcast(long jarg1);
}
