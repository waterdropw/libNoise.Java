/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.xbwee.noise.module;

public class NoiseModuleJNI {
  public final static native void delete_Module(long jarg1);
  public final static native long Module_GetSourceModule(long jarg1, Module jarg1_, int jarg2);
  public final static native int Module_GetSourceModuleCount(long jarg1, Module jarg1_);
  public final static native double Module_GetValue(long jarg1, Module jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Module_SetSourceModule(long jarg1, Module jarg1_, int jarg2, long jarg3, Module jarg3_);
  public final static native long new_Add();
  public final static native int Add_GetSourceModuleCount(long jarg1, Add jarg1_);
  public final static native double Add_GetValue(long jarg1, Add jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Add(long jarg1);
  public final static native long new_Abs();
  public final static native int Abs_GetSourceModuleCount(long jarg1, Abs jarg1_);
  public final static native double Abs_GetValue(long jarg1, Abs jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Abs(long jarg1);
  public final static native double DEFAULT_BILLOW_FREQUENCY_get();
  public final static native double DEFAULT_BILLOW_LACUNARITY_get();
  public final static native int DEFAULT_BILLOW_OCTAVE_COUNT_get();
  public final static native double DEFAULT_BILLOW_PERSISTENCE_get();
  public final static native long DEFAULT_BILLOW_QUALITY_get();
  public final static native int DEFAULT_BILLOW_SEED_get();
  public final static native int BILLOW_MAX_OCTAVE_get();
  public final static native long new_Billow();
  public final static native double Billow_GetFrequency(long jarg1, Billow jarg1_);
  public final static native double Billow_GetLacunarity(long jarg1, Billow jarg1_);
  public final static native long Billow_GetNoiseQuality(long jarg1, Billow jarg1_);
  public final static native int Billow_GetOctaveCount(long jarg1, Billow jarg1_);
  public final static native double Billow_GetPersistence(long jarg1, Billow jarg1_);
  public final static native int Billow_GetSeed(long jarg1, Billow jarg1_);
  public final static native int Billow_GetSourceModuleCount(long jarg1, Billow jarg1_);
  public final static native double Billow_GetValue(long jarg1, Billow jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Billow_SetFrequency(long jarg1, Billow jarg1_, double jarg2);
  public final static native void Billow_SetLacunarity(long jarg1, Billow jarg1_, double jarg2);
  public final static native void Billow_SetNoiseQuality(long jarg1, Billow jarg1_, long jarg2);
  public final static native void Billow_SetOctaveCount(long jarg1, Billow jarg1_, int jarg2);
  public final static native void Billow_SetPersistence(long jarg1, Billow jarg1_, double jarg2);
  public final static native void Billow_SetSeed(long jarg1, Billow jarg1_, int jarg2);
  public final static native void delete_Billow(long jarg1);
  public final static native long new_Blend();
  public final static native long Blend_GetControlModule(long jarg1, Blend jarg1_);
  public final static native int Blend_GetSourceModuleCount(long jarg1, Blend jarg1_);
  public final static native double Blend_GetValue(long jarg1, Blend jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Blend_SetControlModule(long jarg1, Blend jarg1_, long jarg2, Module jarg2_);
  public final static native void delete_Blend(long jarg1);
  public final static native long new_Cache();
  public final static native int Cache_GetSourceModuleCount(long jarg1, Cache jarg1_);
  public final static native double Cache_GetValue(long jarg1, Cache jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Cache_SetSourceModule(long jarg1, Cache jarg1_, int jarg2, long jarg3, Module jarg3_);
  public final static native void delete_Cache(long jarg1);
  public final static native long new_Checkerboard();
  public final static native int Checkerboard_GetSourceModuleCount(long jarg1, Checkerboard jarg1_);
  public final static native double Checkerboard_GetValue(long jarg1, Checkerboard jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Checkerboard(long jarg1);
  public final static native double DEFAULT_CLAMP_LOWER_BOUND_get();
  public final static native double DEFAULT_CLAMP_UPPER_BOUND_get();
  public final static native long new_Clamp();
  public final static native double Clamp_GetLowerBound(long jarg1, Clamp jarg1_);
  public final static native int Clamp_GetSourceModuleCount(long jarg1, Clamp jarg1_);
  public final static native double Clamp_GetUpperBound(long jarg1, Clamp jarg1_);
  public final static native double Clamp_GetValue(long jarg1, Clamp jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Clamp_SetBounds(long jarg1, Clamp jarg1_, double jarg2, double jarg3);
  public final static native void delete_Clamp(long jarg1);
  public final static native double DEFAULT_CONST_VALUE_get();
  public final static native long new_Const();
  public final static native double Const_GetConstValue(long jarg1, Const jarg1_);
  public final static native int Const_GetSourceModuleCount(long jarg1, Const jarg1_);
  public final static native double Const_GetValue(long jarg1, Const jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Const_SetConstValue(long jarg1, Const jarg1_, double jarg2);
  public final static native void delete_Const(long jarg1);
  public final static native void ControlPoint_inputValue_set(long jarg1, ControlPoint jarg1_, double jarg2);
  public final static native double ControlPoint_inputValue_get(long jarg1, ControlPoint jarg1_);
  public final static native void ControlPoint_outputValue_set(long jarg1, ControlPoint jarg1_, double jarg2);
  public final static native double ControlPoint_outputValue_get(long jarg1, ControlPoint jarg1_);
  public final static native long new_ControlPoint();
  public final static native void delete_ControlPoint(long jarg1);
  public final static native long new_Curve();
  public final static native void delete_Curve(long jarg1);
  public final static native void Curve_AddControlPoint(long jarg1, Curve jarg1_, double jarg2, double jarg3);
  public final static native void Curve_ClearAllControlPoints(long jarg1, Curve jarg1_);
  public final static native long Curve_GetControlPointArray(long jarg1, Curve jarg1_);
  public final static native int Curve_GetControlPointCount(long jarg1, Curve jarg1_);
  public final static native int Curve_GetSourceModuleCount(long jarg1, Curve jarg1_);
  public final static native double Curve_GetValue(long jarg1, Curve jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double DEFAULT_CYLINDERS_FREQUENCY_get();
  public final static native long new_Cylinders();
  public final static native double Cylinders_GetFrequency(long jarg1, Cylinders jarg1_);
  public final static native int Cylinders_GetSourceModuleCount(long jarg1, Cylinders jarg1_);
  public final static native double Cylinders_GetValue(long jarg1, Cylinders jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Cylinders_SetFrequency(long jarg1, Cylinders jarg1_, double jarg2);
  public final static native void delete_Cylinders(long jarg1);
  public final static native long new_Displace();
  public final static native int Displace_GetSourceModuleCount(long jarg1, Displace jarg1_);
  public final static native double Displace_GetValue(long jarg1, Displace jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native long Displace_GetXDisplaceModule(long jarg1, Displace jarg1_);
  public final static native long Displace_GetYDisplaceModule(long jarg1, Displace jarg1_);
  public final static native long Displace_GetZDisplaceModule(long jarg1, Displace jarg1_);
  public final static native void Displace_SetDisplaceModules(long jarg1, Displace jarg1_, long jarg2, Module jarg2_, long jarg3, Module jarg3_, long jarg4, Module jarg4_);
  public final static native void Displace_SetXDisplaceModule(long jarg1, Displace jarg1_, long jarg2, Module jarg2_);
  public final static native void Displace_SetYDisplaceModule(long jarg1, Displace jarg1_, long jarg2, Module jarg2_);
  public final static native void Displace_SetZDisplaceModule(long jarg1, Displace jarg1_, long jarg2, Module jarg2_);
  public final static native void delete_Displace(long jarg1);
  public final static native double DEFAULT_EXPONENT_get();
  public final static native long new_Exponent();
  public final static native double Exponent_GetExponent(long jarg1, Exponent jarg1_);
  public final static native int Exponent_GetSourceModuleCount(long jarg1, Exponent jarg1_);
  public final static native double Exponent_GetValue(long jarg1, Exponent jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Exponent_SetExponent(long jarg1, Exponent jarg1_, double jarg2);
  public final static native void delete_Exponent(long jarg1);
  public final static native long new_Invert();
  public final static native int Invert_GetSourceModuleCount(long jarg1, Invert jarg1_);
  public final static native double Invert_GetValue(long jarg1, Invert jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Invert(long jarg1);
  public final static native long new_Max();
  public final static native int Max_GetSourceModuleCount(long jarg1, Max jarg1_);
  public final static native double Max_GetValue(long jarg1, Max jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Max(long jarg1);
  public final static native long new_Min();
  public final static native int Min_GetSourceModuleCount(long jarg1, Min jarg1_);
  public final static native double Min_GetValue(long jarg1, Min jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Min(long jarg1);
  public final static native long new_Multiply();
  public final static native int Multiply_GetSourceModuleCount(long jarg1, Multiply jarg1_);
  public final static native double Multiply_GetValue(long jarg1, Multiply jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Multiply(long jarg1);
  public final static native double DEFAULT_PERLIN_FREQUENCY_get();
  public final static native double DEFAULT_PERLIN_LACUNARITY_get();
  public final static native int DEFAULT_PERLIN_OCTAVE_COUNT_get();
  public final static native double DEFAULT_PERLIN_PERSISTENCE_get();
  public final static native long DEFAULT_PERLIN_QUALITY_get();
  public final static native int DEFAULT_PERLIN_SEED_get();
  public final static native int PERLIN_MAX_OCTAVE_get();
  public final static native long new_Perlin();
  public final static native double Perlin_GetFrequency(long jarg1, Perlin jarg1_);
  public final static native double Perlin_GetLacunarity(long jarg1, Perlin jarg1_);
  public final static native long Perlin_GetNoiseQuality(long jarg1, Perlin jarg1_);
  public final static native int Perlin_GetOctaveCount(long jarg1, Perlin jarg1_);
  public final static native double Perlin_GetPersistence(long jarg1, Perlin jarg1_);
  public final static native int Perlin_GetSeed(long jarg1, Perlin jarg1_);
  public final static native int Perlin_GetSourceModuleCount(long jarg1, Perlin jarg1_);
  public final static native double Perlin_GetValue(long jarg1, Perlin jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Perlin_SetFrequency(long jarg1, Perlin jarg1_, double jarg2);
  public final static native void Perlin_SetLacunarity(long jarg1, Perlin jarg1_, double jarg2);
  public final static native void Perlin_SetNoiseQuality(long jarg1, Perlin jarg1_, long jarg2);
  public final static native void Perlin_SetOctaveCount(long jarg1, Perlin jarg1_, int jarg2);
  public final static native void Perlin_SetPersistence(long jarg1, Perlin jarg1_, double jarg2);
  public final static native void Perlin_SetSeed(long jarg1, Perlin jarg1_, int jarg2);
  public final static native void delete_Perlin(long jarg1);
  public final static native long new_Power();
  public final static native int Power_GetSourceModuleCount(long jarg1, Power jarg1_);
  public final static native double Power_GetValue(long jarg1, Power jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void delete_Power(long jarg1);
  public final static native double DEFAULT_RIDGED_FREQUENCY_get();
  public final static native double DEFAULT_RIDGED_LACUNARITY_get();
  public final static native int DEFAULT_RIDGED_OCTAVE_COUNT_get();
  public final static native long DEFAULT_RIDGED_QUALITY_get();
  public final static native int DEFAULT_RIDGED_SEED_get();
  public final static native int RIDGED_MAX_OCTAVE_get();
  public final static native long new_RidgedMulti();
  public final static native double RidgedMulti_GetFrequency(long jarg1, RidgedMulti jarg1_);
  public final static native double RidgedMulti_GetLacunarity(long jarg1, RidgedMulti jarg1_);
  public final static native long RidgedMulti_GetNoiseQuality(long jarg1, RidgedMulti jarg1_);
  public final static native int RidgedMulti_GetOctaveCount(long jarg1, RidgedMulti jarg1_);
  public final static native int RidgedMulti_GetSeed(long jarg1, RidgedMulti jarg1_);
  public final static native int RidgedMulti_GetSourceModuleCount(long jarg1, RidgedMulti jarg1_);
  public final static native double RidgedMulti_GetValue(long jarg1, RidgedMulti jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void RidgedMulti_SetFrequency(long jarg1, RidgedMulti jarg1_, double jarg2);
  public final static native void RidgedMulti_SetLacunarity(long jarg1, RidgedMulti jarg1_, double jarg2);
  public final static native void RidgedMulti_SetNoiseQuality(long jarg1, RidgedMulti jarg1_, long jarg2);
  public final static native void RidgedMulti_SetOctaveCount(long jarg1, RidgedMulti jarg1_, int jarg2);
  public final static native void RidgedMulti_SetSeed(long jarg1, RidgedMulti jarg1_, int jarg2);
  public final static native void delete_RidgedMulti(long jarg1);
  public final static native double DEFAULT_ROTATE_X_get();
  public final static native double DEFAULT_ROTATE_Y_get();
  public final static native double DEFAULT_ROTATE_Z_get();
  public final static native long new_RotatePoint();
  public final static native int RotatePoint_GetSourceModuleCount(long jarg1, RotatePoint jarg1_);
  public final static native double RotatePoint_GetValue(long jarg1, RotatePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double RotatePoint_GetXAngle(long jarg1, RotatePoint jarg1_);
  public final static native double RotatePoint_GetYAngle(long jarg1, RotatePoint jarg1_);
  public final static native double RotatePoint_GetZAngle(long jarg1, RotatePoint jarg1_);
  public final static native void RotatePoint_SetAngles(long jarg1, RotatePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void RotatePoint_SetXAngle(long jarg1, RotatePoint jarg1_, double jarg2);
  public final static native void RotatePoint_SetYAngle(long jarg1, RotatePoint jarg1_, double jarg2);
  public final static native void RotatePoint_SetZAngle(long jarg1, RotatePoint jarg1_, double jarg2);
  public final static native void delete_RotatePoint(long jarg1);
  public final static native double DEFAULT_BIAS_get();
  public final static native double DEFAULT_SCALE_get();
  public final static native long new_ScaleBias();
  public final static native double ScaleBias_GetBias(long jarg1, ScaleBias jarg1_);
  public final static native double ScaleBias_GetScale(long jarg1, ScaleBias jarg1_);
  public final static native int ScaleBias_GetSourceModuleCount(long jarg1, ScaleBias jarg1_);
  public final static native double ScaleBias_GetValue(long jarg1, ScaleBias jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ScaleBias_SetBias(long jarg1, ScaleBias jarg1_, double jarg2);
  public final static native void ScaleBias_SetScale(long jarg1, ScaleBias jarg1_, double jarg2);
  public final static native void delete_ScaleBias(long jarg1);
  public final static native double DEFAULT_SCALE_POINT_X_get();
  public final static native double DEFAULT_SCALE_POINT_Y_get();
  public final static native double DEFAULT_SCALE_POINT_Z_get();
  public final static native long new_ScalePoint();
  public final static native int ScalePoint_GetSourceModuleCount(long jarg1, ScalePoint jarg1_);
  public final static native double ScalePoint_GetValue(long jarg1, ScalePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double ScalePoint_GetXScale(long jarg1, ScalePoint jarg1_);
  public final static native double ScalePoint_GetYScale(long jarg1, ScalePoint jarg1_);
  public final static native double ScalePoint_GetZScale(long jarg1, ScalePoint jarg1_);
  public final static native void ScalePoint_SetScale__SWIG_0(long jarg1, ScalePoint jarg1_, double jarg2);
  public final static native void ScalePoint_SetScale__SWIG_1(long jarg1, ScalePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ScalePoint_SetXScale(long jarg1, ScalePoint jarg1_, double jarg2);
  public final static native void ScalePoint_SetYScale(long jarg1, ScalePoint jarg1_, double jarg2);
  public final static native void ScalePoint_SetZScale(long jarg1, ScalePoint jarg1_, double jarg2);
  public final static native void delete_ScalePoint(long jarg1);
  public final static native double DEFAULT_SELECT_EDGE_FALLOFF_get();
  public final static native double DEFAULT_SELECT_LOWER_BOUND_get();
  public final static native double DEFAULT_SELECT_UPPER_BOUND_get();
  public final static native long new_Select();
  public final static native long Select_GetControlModule(long jarg1, Select jarg1_);
  public final static native double Select_GetEdgeFalloff(long jarg1, Select jarg1_);
  public final static native double Select_GetLowerBound(long jarg1, Select jarg1_);
  public final static native int Select_GetSourceModuleCount(long jarg1, Select jarg1_);
  public final static native double Select_GetUpperBound(long jarg1, Select jarg1_);
  public final static native double Select_GetValue(long jarg1, Select jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Select_SetBounds(long jarg1, Select jarg1_, double jarg2, double jarg3);
  public final static native void Select_SetControlModule(long jarg1, Select jarg1_, long jarg2, Module jarg2_);
  public final static native void Select_SetEdgeFalloff(long jarg1, Select jarg1_, double jarg2);
  public final static native void delete_Select(long jarg1);
  public final static native double DEFAULT_SPHERES_FREQUENCY_get();
  public final static native long new_Spheres();
  public final static native double Spheres_GetFrequency(long jarg1, Spheres jarg1_);
  public final static native int Spheres_GetSourceModuleCount(long jarg1, Spheres jarg1_);
  public final static native double Spheres_GetValue(long jarg1, Spheres jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Spheres_SetFrequency(long jarg1, Spheres jarg1_, double jarg2);
  public final static native void delete_Spheres(long jarg1);
  public final static native long new_Terrace();
  public final static native void delete_Terrace(long jarg1);
  public final static native void Terrace_AddControlPoint(long jarg1, Terrace jarg1_, double jarg2);
  public final static native void Terrace_ClearAllControlPoints(long jarg1, Terrace jarg1_);
  public final static native long Terrace_GetControlPointArray(long jarg1, Terrace jarg1_);
  public final static native int Terrace_GetControlPointCount(long jarg1, Terrace jarg1_);
  public final static native int Terrace_GetSourceModuleCount(long jarg1, Terrace jarg1_);
  public final static native void Terrace_InvertTerraces__SWIG_0(long jarg1, Terrace jarg1_, boolean jarg2);
  public final static native void Terrace_InvertTerraces__SWIG_1(long jarg1, Terrace jarg1_);
  public final static native boolean Terrace_IsTerracesInverted(long jarg1, Terrace jarg1_);
  public final static native double Terrace_GetValue(long jarg1, Terrace jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Terrace_MakeControlPoints(long jarg1, Terrace jarg1_, int jarg2);
  public final static native double DEFAULT_TRANSLATE_POINT_X_get();
  public final static native double DEFAULT_TRANSLATE_POINT_Y_get();
  public final static native double DEFAULT_TRANSLATE_POINT_Z_get();
  public final static native long new_TranslatePoint();
  public final static native int TranslatePoint_GetSourceModuleCount(long jarg1, TranslatePoint jarg1_);
  public final static native double TranslatePoint_GetValue(long jarg1, TranslatePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double TranslatePoint_GetXTranslation(long jarg1, TranslatePoint jarg1_);
  public final static native double TranslatePoint_GetYTranslation(long jarg1, TranslatePoint jarg1_);
  public final static native double TranslatePoint_GetZTranslation(long jarg1, TranslatePoint jarg1_);
  public final static native void TranslatePoint_SetTranslation__SWIG_0(long jarg1, TranslatePoint jarg1_, double jarg2);
  public final static native void TranslatePoint_SetTranslation__SWIG_1(long jarg1, TranslatePoint jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void TranslatePoint_SetXTranslation(long jarg1, TranslatePoint jarg1_, double jarg2);
  public final static native void TranslatePoint_SetYTranslation(long jarg1, TranslatePoint jarg1_, double jarg2);
  public final static native void TranslatePoint_SetZTranslation(long jarg1, TranslatePoint jarg1_, double jarg2);
  public final static native void delete_TranslatePoint(long jarg1);
  public final static native double DEFAULT_TURBULENCE_FREQUENCY_get();
  public final static native double DEFAULT_TURBULENCE_POWER_get();
  public final static native int DEFAULT_TURBULENCE_ROUGHNESS_get();
  public final static native int DEFAULT_TURBULENCE_SEED_get();
  public final static native long new_Turbulence();
  public final static native double Turbulence_GetFrequency(long jarg1, Turbulence jarg1_);
  public final static native double Turbulence_GetPower(long jarg1, Turbulence jarg1_);
  public final static native int Turbulence_GetRoughnessCount(long jarg1, Turbulence jarg1_);
  public final static native int Turbulence_GetSeed(long jarg1, Turbulence jarg1_);
  public final static native int Turbulence_GetSourceModuleCount(long jarg1, Turbulence jarg1_);
  public final static native double Turbulence_GetValue(long jarg1, Turbulence jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Turbulence_SetFrequency(long jarg1, Turbulence jarg1_, double jarg2);
  public final static native void Turbulence_SetPower(long jarg1, Turbulence jarg1_, double jarg2);
  public final static native void Turbulence_SetRoughness(long jarg1, Turbulence jarg1_, int jarg2);
  public final static native void Turbulence_SetSeed(long jarg1, Turbulence jarg1_, int jarg2);
  public final static native void delete_Turbulence(long jarg1);
  public final static native double DEFAULT_VORONOI_DISPLACEMENT_get();
  public final static native double DEFAULT_VORONOI_FREQUENCY_get();
  public final static native int DEFAULT_VORONOI_SEED_get();
  public final static native long new_Voronoi();
  public final static native void Voronoi_EnableDistance__SWIG_0(long jarg1, Voronoi jarg1_, boolean jarg2);
  public final static native void Voronoi_EnableDistance__SWIG_1(long jarg1, Voronoi jarg1_);
  public final static native double Voronoi_GetDisplacement(long jarg1, Voronoi jarg1_);
  public final static native double Voronoi_GetFrequency(long jarg1, Voronoi jarg1_);
  public final static native int Voronoi_GetSourceModuleCount(long jarg1, Voronoi jarg1_);
  public final static native int Voronoi_GetSeed(long jarg1, Voronoi jarg1_);
  public final static native boolean Voronoi_IsDistanceEnabled(long jarg1, Voronoi jarg1_);
  public final static native double Voronoi_GetValue(long jarg1, Voronoi jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void Voronoi_SetDisplacement(long jarg1, Voronoi jarg1_, double jarg2);
  public final static native void Voronoi_SetFrequency(long jarg1, Voronoi jarg1_, double jarg2);
  public final static native void Voronoi_SetSeed(long jarg1, Voronoi jarg1_, int jarg2);
  public final static native void delete_Voronoi(long jarg1);
  public final static native long Add_SWIGUpcast(long jarg1);
  public final static native long Abs_SWIGUpcast(long jarg1);
  public final static native long Billow_SWIGUpcast(long jarg1);
  public final static native long Blend_SWIGUpcast(long jarg1);
  public final static native long Cache_SWIGUpcast(long jarg1);
  public final static native long Checkerboard_SWIGUpcast(long jarg1);
  public final static native long Clamp_SWIGUpcast(long jarg1);
  public final static native long Const_SWIGUpcast(long jarg1);
  public final static native long Curve_SWIGUpcast(long jarg1);
  public final static native long Cylinders_SWIGUpcast(long jarg1);
  public final static native long Displace_SWIGUpcast(long jarg1);
  public final static native long Exponent_SWIGUpcast(long jarg1);
  public final static native long Invert_SWIGUpcast(long jarg1);
  public final static native long Max_SWIGUpcast(long jarg1);
  public final static native long Min_SWIGUpcast(long jarg1);
  public final static native long Multiply_SWIGUpcast(long jarg1);
  public final static native long Perlin_SWIGUpcast(long jarg1);
  public final static native long Power_SWIGUpcast(long jarg1);
  public final static native long RidgedMulti_SWIGUpcast(long jarg1);
  public final static native long RotatePoint_SWIGUpcast(long jarg1);
  public final static native long ScaleBias_SWIGUpcast(long jarg1);
  public final static native long ScalePoint_SWIGUpcast(long jarg1);
  public final static native long Select_SWIGUpcast(long jarg1);
  public final static native long Spheres_SWIGUpcast(long jarg1);
  public final static native long Terrace_SWIGUpcast(long jarg1);
  public final static native long TranslatePoint_SWIGUpcast(long jarg1);
  public final static native long Turbulence_SWIGUpcast(long jarg1);
  public final static native long Voronoi_SWIGUpcast(long jarg1);
}
